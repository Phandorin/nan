// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package nan

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c6c109cDecodeGithubComKakTusNan(in *jlexer.Lexer, out *nanFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field000":
			(out.Field000).UnmarshalEasyJSON(in)
		case "Field001":
			(out.Field001).UnmarshalEasyJSON(in)
		case "Field002":
			(out.Field002).UnmarshalEasyJSON(in)
		case "Field003":
			(out.Field003).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c6c109cEncodeGithubComKakTusNan(out *jwriter.Writer, in nanFull) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Field000\":"
		out.RawString(prefix[1:])
		(in.Field000).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Field001\":"
		out.RawString(prefix)
		(in.Field001).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Field002\":"
		out.RawString(prefix)
		(in.Field002).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Field003\":"
		out.RawString(prefix)
		(in.Field003).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v nanFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c6c109cEncodeGithubComKakTusNan(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v nanFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c6c109cEncodeGithubComKakTusNan(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *nanFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c6c109cDecodeGithubComKakTusNan(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *nanFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c6c109cDecodeGithubComKakTusNan(l, v)
}
