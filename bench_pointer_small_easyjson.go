// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package nan

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c41e46eDecodeGithubComKakTusNan(in *jlexer.Lexer, out *pointerSmall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field000":
			if in.IsNull() {
				in.Skip()
				out.Field000 = nil
			} else {
				if out.Field000 == nil {
					out.Field000 = new(string)
				}
				*out.Field000 = string(in.String())
			}
		case "Field001":
			if in.IsNull() {
				in.Skip()
				out.Field001 = nil
			} else {
				if out.Field001 == nil {
					out.Field001 = new(string)
				}
				*out.Field001 = string(in.String())
			}
		case "Field002":
			if in.IsNull() {
				in.Skip()
				out.Field002 = nil
			} else {
				if out.Field002 == nil {
					out.Field002 = new(string)
				}
				*out.Field002 = string(in.String())
			}
		case "Field003":
			if in.IsNull() {
				in.Skip()
				out.Field003 = nil
			} else {
				if out.Field003 == nil {
					out.Field003 = new(string)
				}
				*out.Field003 = string(in.String())
			}
		case "Field004":
			if in.IsNull() {
				in.Skip()
				out.Field004 = nil
			} else {
				if out.Field004 == nil {
					out.Field004 = new(string)
				}
				*out.Field004 = string(in.String())
			}
		case "Field005":
			if in.IsNull() {
				in.Skip()
				out.Field005 = nil
			} else {
				if out.Field005 == nil {
					out.Field005 = new(string)
				}
				*out.Field005 = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c41e46eEncodeGithubComKakTusNan(out *jwriter.Writer, in pointerSmall) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Field000\":"
		out.RawString(prefix[1:])
		if in.Field000 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Field000))
		}
	}
	{
		const prefix string = ",\"Field001\":"
		out.RawString(prefix)
		if in.Field001 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Field001))
		}
	}
	{
		const prefix string = ",\"Field002\":"
		out.RawString(prefix)
		if in.Field002 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Field002))
		}
	}
	{
		const prefix string = ",\"Field003\":"
		out.RawString(prefix)
		if in.Field003 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Field003))
		}
	}
	{
		const prefix string = ",\"Field004\":"
		out.RawString(prefix)
		if in.Field004 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Field004))
		}
	}
	{
		const prefix string = ",\"Field005\":"
		out.RawString(prefix)
		if in.Field005 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Field005))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pointerSmall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c41e46eEncodeGithubComKakTusNan(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pointerSmall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c41e46eEncodeGithubComKakTusNan(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pointerSmall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c41e46eDecodeGithubComKakTusNan(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pointerSmall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c41e46eDecodeGithubComKakTusNan(l, v)
}
